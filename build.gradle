buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

version = "${mod_stage}" != "" ? "${mc_version}-${mod_version}-${mod_stage}" : "${mc_version}-${mod_version}"
group = "meldexun.${mod_id}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    includedDependencies
    implementation.extendsFrom(includedDependencies)

    buildDependencies
}

repositories {
    ivy {
        url 'https://github.com/'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() } 
    }

    maven { url = 'https://www.cursemaven.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName "runClient ${mod_name} ${mc_version}"
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                reachfix {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "runServer ${mod_name} ${mc_version}"
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                reachfix {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName "runData ${mod_name} ${mc_version}"
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.disableRefMap', 'true'
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                reachfix {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    inputs.property('version', "${mod_stage}" != "" ? "${mod_version}-${mod_stage}" : "${mod_version}")

    filesMatching('META-INF/mods.toml') {
        expand version: inputs.properties.get('version')
    }
}

jar {
    archiveBaseName = mod_name
    archiveAppendix = mc_version
    archiveVersion = mod_version
    archiveClassifier = mod_stage

    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.finalizedBy('reobfJar')

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}
